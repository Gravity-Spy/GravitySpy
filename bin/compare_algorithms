#!/usr/bin/env python

# Copyright (C) 2013 Michael Coughlin
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import os, sys, pdb
import numpy as np
from matplotlib import use
use('agg')

import optparse
from sqlalchemy.engine import create_engine
import pandas as pd
import glue.segments

from gwpy.segments import DataQualityFlag
from gwpy.table import EventTable
from gwpy.plotter import EventTablePlot, TimeSeriesPlot

__author__ = "Michael Coughlin <michael.coughlin@ligo.org>"
__version__ = 1.0
__date__    = "9/22/2013"

# =============================================================================
#
#                               DEFINITIONS
#
# =============================================================================

def parse_commandline():
    """@parse the options given on the command-line.
    """
    parser = optparse.OptionParser(usage=__doc__,version=__version__)

    parser.add_option("-d", "--detector", help="Detector.",default = None)
    parser.add_option("-b", "--database", help="Database (O1GlitchClassificationUpdate,classification,glitches).", default="O1GlitchClassificationUpdate")
    parser.add_option("-o", "--outfile", help="Output file.",default ="associated.dat")
    parser.add_option("-s", "--gpsStart", help="Start GPS Time.",type=int,default=1120000000)
    parser.add_option("-e", "--gpsEnd", help="End GPS Time.",type=int,default=1140000000)

    parser.add_option("--doDatabase", action="store_true", default=False,
                      help="compare to database")
    parser.add_option("--doTextFile", action="store_true", default=False,
                      help="compare to text file")

    parser.add_option("-t", "--textFile", help="Text file.",default="../../../../Elena/H1_DCS-CALIB_STRAIN_C02-LabeledfullRun.txt")

    parser.add_option("-v", "--verbose", action="store_true", default=False,
                      help="Run verbosely. (Default: False)")

    opts, args = parser.parse_args()

    return opts

# Parse command line
opts = parse_commandline()

detector = opts.detector
database = opts.database
outfile = opts.outfile
gpsStart = opts.gpsStart
gpsEnd = opts.gpsEnd

if not (opts.doDatabase or opts.doTextFile):
    print "Need to enable --doDatabase or --doTextFile"
    exit(0)

# Obtain analysis ready segments for this time period
#analysis_ready = DataQualityFlag.query('{0}:DMT-ANALYSIS_READY:1'.format(detector),float(gpsStart),float(gpsEnd))

gspylabels = ["1080Lines","1400Ripples","Air_Compressor","Blip","Chirp","Extremely_Loud","Helix","Koi_Fish","Light_Modulation","Low_Frequency_Burst","Low_Frequency_Lines","No_Glitch","None_of_the_Above","Paired_Doves","Power_Line","Repeating_Blips","Scattered_Light","Scratchy","Tomte","Violin_Mode","Wandering_Line","Whistle"]

engine = create_engine('postgresql://{0}:{1}@gravityspy.ciera.northwestern.edu:5432/gravityspy'.format(os.environ['GRAVITYSPY_DATABASE_USER'],os.environ['GRAVITYSPY_DATABASE_PASSWD']))
tmp = pd.read_sql(database,engine)
if not detector == None:
    tmp = tmp.loc[tmp.ifo == detector]

gspytmp = tmp.loc[tmp.Pipeline == "GravitySpy"]

if opts.doTextFile:
    tmp = pd.read_csv(opts.textFile,header=0)
    tmp["Label"] = tmp["LABEL"]
    tmp["peakGPS"] = np.round(tmp["gps"])

fid = open(outfile,'w')
fid.write("Name ")
for ii, gspylabel in enumerate(gspylabels):
    fid.write(' %s '%gspylabel)
fid.write("\n")

for label in sorted(tmp.Label.unique()):
    if label in gspylabels: continue
    tmplabel = tmp.loc[tmp.Label == label]

    gpsyrows = np.zeros((len(gspylabels),))
    for index, row in tmplabel.iterrows():
        #idx = np.argmin(np.abs(gspytmp["peakGPS"].values - row.peakGPS))
        #idx = np.where(gspytmp["peakGPS"].values==row.peakGPS)[0]
        idx = np.where(np.round(gspytmp["peakGPS"].values)==row.peakGPS)[0]

        if len(idx) > 0:
            idx = idx[0]
            asctrig = gspytmp.iloc[idx.astype(int)]
            lab = asctrig.Label
            idx = gspylabels.index(lab)
            gpsyrows[idx] = gpsyrows[idx] + 1
    fid.write('%s '%label)
    for ii, gspylabel in enumerate(gspylabels):
        fid.write(' %d '%gpsyrows[ii])
    fid.write('\n')
fid.close()
