#!/usr/bin/env python

from panoptes_client import *

import pandas as pd
import ast
import numpy as np
import os, sys
import ast
import pdb
import datetime
import collections
import operator

from sqlalchemy.engine import create_engine
from gravityspy.API.getLabelDict import getAnswers
from gravityspy.API import getGoldenImages
from scipy.sparse import coo_matrix

def levelDict(x):
    return workflowLevelDict[x]

engine = create_engine('postgresql://{0}:{1}@gravityspy.ciera.northwestern.edu:5432/gravityspy'.format(os.environ['GRAVITYSPY_DATABASE_USER'],os.environ['GRAVITYSPY_DATABASE_PASSWD']))

# Load classifications, current user DB status and golden images from DB
classifications = pd.read_sql('SELECT links_user, links_subjects, links_workflow, "annotations_value_choiceINT" FROM classificationsdev', engine)
userStatus = pd.read_sql('userStatus', engine)
goldenDF = pd.read_sql('goldenimages', engine)

# Obtain workflow order
workflowOrder = [int(str(i)) for i in Project.find('1104').raw['configuration']['workflow_order']]
levelWorkflowDict = dict(enumerate(workflowOrder))
workflowLevelDict = dict((v, k + 1) for k,v in levelWorkflowDict.iteritems())

# Filter classifications
# Specific to Gravity Spy based on study done earlier
classifications.loc[classifications.links_workflow == 3063, 'links_workflow'] = 2360

# Make sure classification was done in an actual active workflow
classifications = classifications.loc[classifications.links_workflow.isin(workflowOrder)]

# Convert workflow ID into 'Level'
classifications['Level'] = classifications.links_workflow.apply(levelDict)

# Make sure choice is a valid index
classifications = classifications.loc[(classifications.annotations_value_choiceINT != -1)]

# Ignore NONEOFTHEABOVE classificatios when constructing confusion matrix
classifications = classifications.loc[classifications.annotations_value_choiceINT != 12]

# Make sure to evaluate only logged in users
classifications = classifications.loc[classifications.links_user != 0]

# Initialize empty user DB by setting currentworkflow to the maximimum level a user had made a classification in
# (This logic will capture new users not in the DB loaded above)
userStatusInit = pd.DataFrame({'userID' : classifications.groupby('links_user').Level.max().index.tolist(), 'workflowInit' : classifications.groupby('links_user').Level.max().tolist()})

# Retrieve Answers
answers = getAnswers('1104')
answersDictRev =  dict(enumerate(sorted(answers[2360].keys())))
answersDict = dict((str(v),k) for k,v in answersDictRev.iteritems())

# From ansers Dict determine number of classes
numClasses = max(answersDict.iteritems(), key=operator.itemgetter(1))[1] + 1

# merge the golden image DF with th classification (this merge is on links_subject (i.e. the zooID of the image classified)
image_and_classification = classifications.merge(goldenDF, on=['links_subjects'])

# This is where the power of pandas comes in...on the fly in very quick order we can fill all users confusion matrices by smartly chosen groupby
test = image_and_classification.groupby(['links_user','annotations_value_choiceINT','GoldLabel'])
test = test.count().links_subjects.to_frame().reset_index()

# Determine what indices of the confusion matrix we evaluate for each level based on the answers for that level
promotion_Level1 = [answersDict[iAnswer] for iAnswer in answers[1610].keys() if iAnswer not in['NONEOFTHEABOVE', '1400RIPPLES', '1080LINES']]
promotion_Level2 = [answersDict[iAnswer] for iAnswer in answers[1934].keys() if iAnswer not in['NONEOFTHEABOVE', '1400RIPPLES', '1080LINES']]
promotion_Level3 = [answersDict[iAnswer] for iAnswer in answers[1935].keys() if iAnswer not in['NONEOFTHEABOVE', '1400RIPPLES', '1080LINES']]
promotion_Level4 = [answersDict[iAnswer] for iAnswer in answers[2360].keys() if iAnswer not in['NONEOFTHEABOVE', '1400RIPPLES', '1080LINES']]

# Set a criteria for "user skill"
alpha = .7*np.ones(numClasses)
alpha[4] = 0.65

# Create "Sparse Matrices" and perform a normalization task on them. 
# Afterwards determine if the users diagonal is above the threshold set above
for iUser in test.groupby('links_user'):
    columns = iUser[1].annotations_value_choiceINT        
    rows = iUser[1]['GoldLabel']
    entry = iUser[1]['links_subjects']
    tmp = coo_matrix((entry,(rows,columns)),shape=(numClasses, numClasses))
    conf_divided,a1,a2,a3 = np.linalg.lstsq(np.diagflat(tmp.sum(axis=1)), tmp.todense())
    alphaTmp = np.diag(conf_divided)
    # Extract this users currentworkflow based on what maximum level they had made a classification.
    userCurrentLevel = userStatusInit.loc[userStatusInit.userID == iUser[0], 'workflowInit'].iloc[0]
    # Check to see if they satisfy the promotion criteria for any level above their current level
    # if so update initialized workflow to the true workflow
    if (alphaTmp[promotion_Level1] > alpha[promotion_Level1]).all() and (userCurrentLevel < 2):
        userStatusInit.loc[userStatusInit.userID == iUser[0], 'workflowInit'] = 2

    if (alphaTmp[promotion_Level2] > alpha[promotion_Level2]).all() and (userCurrentLevel < 3):
        userStatusInit.loc[userStatusInit.userID == iUser[0], 'workflowInit'] = 3

    if (alphaTmp[promotion_Level3] > alpha[promotion_Level3]).all() and (userCurrentLevel < 4):
        userStatusInit.loc[userStatusInit.userID == iUser[0], 'workflowInit'] = 4

    if (alphaTmp[promotion_Level4] > alpha[promotion_Level4]).all() and (userCurrentLevel < 5):
        userStatusInit.loc[userStatusInit.userID == iUser[0], 'workflowInit'] = 5

# Merge user Status DB with DB containing the workflowInit DB
# which demonstrates what level  a user *should* be on at this point
userStatus_DB_Init = userStatusInit.merge(userStatus,how='outer')
userStatus_DB_Init = userStatus_DB_Init.fillna(0)
userStatus_DB_Init = userStatus_DB_Init.astype(int)
# Determine users who need updating
# These are users whose Initworkflow is larger than there DB workflow
updates = userStatus_DB_Init.loc[userStatus_DB_Init.workflowInit > userStatus_DB_Init.workflowDB]

# Now we would like to save userStatus DB with the updates from workflowInit
userStatus_DB_Init.loc[userStatus_DB_Init.workflowInit > userStatus_DB_Init.workflowDB, 'workflowDB'] = userStatus_DB_Init.loc[userStatus_DB_Init.workflowInit > userStatus_DB_Init.workflowDB, 'workflowInit']
userStatus = userStatus_DB_Init[['userID', 'workflowDB']]

for iWorkflow in range(1,6):
    print('Level {0}: {1}'.format(iWorkflow,len(userStatus.loc[userStatus.workflowDB == iWorkflow])))

# Now update user settings
Panoptes.connect()
project = Project.find(slug='zooniverse/gravity-spy')

def updateSettings(x):
    user = User.find(x.userID)
    new_settings = {"workflow_id": "{0}".format(levelWorkflowDict[x.workflowInit - 1])}
    print(user)
    print(new_settings)
    ProjectPreferences.save_settings(project=project, user=user, settings=new_settings) 

updates.apply(updateSettings,axis=1)

# save new user Status
for iRow in updates.iterrows():
    SQLCommand = 'UPDATE \"userStatus\" SET \"workflowDB\" = {0} WHERE \"userID\" = {1}'.format(iRow[1][['workflowInit']].iloc[0], iRow[1][['userID']].iloc[0])
    result = engine.execute(SQLCommand)
    if not result.rowcount:
        print 'New User {0}'.format(iRow[1][['userID']].iloc[0])
        pd.DataFrame({'userID' : iRow[1]['userID'], 'workflowDB' : iRow[1]['workflowInit']},index=[0])[['userID', 'workflowDB']].to_sql('userStatus', engine, index=False, if_exists='append')
